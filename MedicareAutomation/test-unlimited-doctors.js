const DoctorFetching = require('./doctor-fetching');
const GoogleSheetsService = require('./google-sheets-service');

async function testUnlimitedDoctors() {
    console.log('üß™ Testing Unlimited Doctor Fetching...\n');
    
    const doctorFetching = new DoctorFetching();
    const googleSheetsService = new GoogleSheetsService();
    
    try {
        // Initialize browser
        console.log('üöÄ Starting browser...');
        await doctorFetching.initialize();
        
        // Get a sample patient with credentials for testing
        console.log('üìä Getting sample patient for unlimited doctors testing...');
        const patients = await googleSheetsService.getPatientsWithCredentials();
        
        if (patients.length === 0) {
            console.log('‚ùå No patients with credentials found for testing');
            return;
        }
        
        const testPatient = patients[0];
        console.log(`üë§ Test Patient: ${testPatient.lastName} (Row ${testPatient.rowIndex})`);
        console.log(`üîê Credentials: ${testPatient.existingCredentials}`);
        
        // Login to Medicare
        console.log('\nüîê Logging in to Medicare...');
        const loginResult = await doctorFetching.loginToMedicare(testPatient.existingCredentials);
        
        if (!loginResult.success) {
            console.log(`‚ùå Login failed: ${loginResult.message}`);
            return;
        }
        
        console.log('‚úÖ Successfully logged in to Medicare');
        
        // Extract patient state
        const patientState = doctorFetching.extractStateFromAddress(testPatient.address);
        console.log(`üìç Patient state: ${patientState}`);
        
        // Test the full doctor fetching process
        console.log('\nüè• Testing unlimited doctor fetching process...');
        console.log('=' * 70);
        
        const startTime = Date.now();
        
        // Fetch claims with pagination
        console.log('üìã Step 1: Fetching all claims with pagination...');
        const claims = await doctorFetching.fetchClaims();
        console.log(`‚úÖ Found ${claims.length} medical claims`);
        
        if (claims.length > 0) {
            // Analyze providers (now gets up to 10 instead of 3)
            console.log('\nüîç Step 2: Analyzing providers (up to 10 instead of 3)...');
            const topProviders = await doctorFetching.analyzeProviders(claims, patientState);
            console.log(`‚úÖ Found ${topProviders.length} top providers to validate`);
            
            // Show all providers we'll check
            console.log('\nüìã Top providers to validate:');
            topProviders.forEach((provider, i) => {
                console.log(`${i + 1}. ${provider.provider} (${provider.count} visits)`);
            });
            
            if (topProviders.length > 0) {
                console.log('\n‚úÖ Step 3: Validating ALL providers (no 2-doctor limit)...');
                console.log('=' * 60);
                
                const recommendedDoctors = [];
                let totalProvidersChecked = 0;
                let validationFailedCount = 0;
                
                // Process ALL providers without stopping at 2
                for (const providerData of topProviders) {
                    console.log(`\nüîç Validating provider ${totalProvidersChecked + 1}/${topProviders.length}: ${providerData.provider}`);
                    totalProvidersChecked++;
                    
                    const hipaaSpaceProvider = await doctorFetching.searchProviderOnHIPAASpace(providerData.provider, patientState);
                    
                    if (hipaaSpaceProvider) {
                        const providerInfo = await doctorFetching.validateProviderFromHIPAASpace(hipaaSpaceProvider);
                        
                        if (providerInfo) {
                            providerInfo.visitCount = providerData.count;
                            recommendedDoctors.push(providerInfo);
                            console.log(`‚úÖ Doctor ${recommendedDoctors.length}: ${providerInfo.fullName} (${providerData.count} visits) - ${providerInfo.specialty}`);
                            console.log(`   üìã Validation: ${providerInfo.validationInfo?.validationReason}`);
                        } else {
                            validationFailedCount++;
                            console.log(`‚ùå Validation failed for provider ${totalProvidersChecked}`);
                        }
                    } else {
                        console.log(`‚ùå Could not find provider on HIPAASpace API`);
                        validationFailedCount++;
                    }
                    
                    // Show progress - NO LIMIT!
                    console.log(`üìä Progress: ${recommendedDoctors.length} doctors validated so far (continuing to check all providers)...`);
                }
                
                const endTime = Date.now();
                const totalTime = ((endTime - startTime) / 1000).toFixed(2);
                
                // Results summary
                console.log('\n' + '=' * 70);
                console.log('üéØ UNLIMITED DOCTORS TEST RESULTS:');
                console.log('=' * 70);
                console.log(`‚è±Ô∏è  Total processing time: ${totalTime} seconds`);
                console.log(`üîç Total providers checked: ${totalProvidersChecked}`);
                console.log(`‚úÖ Valid doctors found: ${recommendedDoctors.length}`);
                console.log(`‚ùå Validation failures: ${validationFailedCount}`);
                console.log(`üìà Success rate: ${totalProvidersChecked > 0 ? ((recommendedDoctors.length / totalProvidersChecked) * 100).toFixed(1) : 0}%`);
                
                if (recommendedDoctors.length > 0) {
                    console.log('\nüè• ALL VALIDATED DOCTORS:');
                    console.log('-' * 50);
                    recommendedDoctors.forEach((doctor, i) => {
                        console.log(`${i + 1}. ${doctor.fullName}`);
                        console.log(`   üè• Specialty: ${doctor.specialty}`);
                        console.log(`   üìç Location: ${doctor.practiceCity}, ${doctor.practiceState}`);
                        console.log(`   üìä Visits: ${doctor.visitCount}`);
                        console.log(`   üîç NPI: ${doctor.npi}`);
                        console.log('');
                    });
                    
                    // Update Google Sheets with ALL doctors
                    console.log('üíæ Updating Google Sheets with ALL validated doctors...');
                    try {
                        await googleSheetsService.updateValidDoctors(testPatient.rowIndex, recommendedDoctors);
                        console.log(`‚úÖ Successfully updated Column G with ${recommendedDoctors.length} doctors`);
                    } catch (updateError) {
                        console.error(`‚ùå Error updating Google Sheets:`, updateError);
                    }
                } else {
                    console.log('\n‚ùå No valid doctors found after checking all providers');
                }
                
                // Compare with old vs new approach
                console.log('\nüìä OLD vs NEW APPROACH COMPARISON:');
                console.log('=' * 50);
                console.log(`‚ùå OLD: Limited to top 3 providers, stopped at 2 doctors`);
                console.log(`‚úÖ NEW: Checks up to 10 providers, gets ALL valid doctors`);
                console.log(`üìà Improvement: ${Math.max(0, recommendedDoctors.length - 2)} additional doctors found`);
                
                if (recommendedDoctors.length >= 3) {
                    console.log('\nüöÄ SUCCESS: Found 3+ doctors (more than old 2-doctor limit)!');
                } else if (recommendedDoctors.length > 0) {
                    console.log('\n‚úÖ SUCCESS: Found all available valid doctors');
                } else {
                    console.log('\n‚ö†Ô∏è  No valid doctors found - may need to check more providers');
                }
                
            } else {
                console.log('‚ùå No providers found to validate');
            }
        } else {
            console.log('‚ùå No claims found for this patient');
        }
        
        // Logout
        console.log('\nüö™ Logging out...');
        const logoutResult = await doctorFetching.logoutFromMedicare();
        console.log(`üéØ Logout: ${logoutResult.success ? 'SUCCESS' : 'FAILED'}`);
        
    } catch (error) {
        console.error('‚ùå Unlimited doctors test failed:', error);
    } finally {
        console.log('\nüîö Closing browser...');
        await doctorFetching.closeBrowser();
    }
}

async function demonstrateUnlimitedDoctorsFeature() {
    console.log('üè• Unlimited Doctors Enhancement\n');
    console.log('=' * 70);
    
    console.log('üö® PREVIOUS LIMITATION:');
    console.log('   ‚Ä¢ Limited to top 3 providers only');
    console.log('   ‚Ä¢ Stopped after finding 2 validated doctors');
    console.log('   ‚Ä¢ Missing potential valid doctors');
    console.log('   ‚Ä¢ Artificial constraint on results');
    console.log('');
    
    console.log('üöÄ NEW UNLIMITED APPROACH:');
    console.log('   1Ô∏è‚É£ Get top 10 providers (instead of 3)');
    console.log('   2Ô∏è‚É£ Validate ALL providers (no stopping at 2)');
    console.log('   3Ô∏è‚É£ Return ALL valid doctors found');
    console.log('   4Ô∏è‚É£ Better coverage of patient\'s healthcare network');
    console.log('');
    
    console.log('üìà IMPROVEMENTS:');
    console.log('   ‚úÖ Up to 10 providers checked (vs 3)');
    console.log('   ‚úÖ No artificial 2-doctor limit');
    console.log('   ‚úÖ Get 3, 4, 5+ doctors if available');
    console.log('   ‚úÖ More comprehensive doctor recommendations');
    console.log('   ‚úÖ Better patient coverage');
    console.log('');
    
    console.log('üéØ EXPECTED RESULTS:');
    console.log('   ‚Ä¢ Patients with many providers ‚Üí More doctors found');
    console.log('   ‚Ä¢ Patients with few providers ‚Üí Same or slightly more');
    console.log('   ‚Ä¢ Better utilization of available data');
    console.log('   ‚Ä¢ More complete doctor recommendations');
    console.log('');
    
    console.log('üí° EXAMPLE SCENARIOS:');
    console.log('   üìä Patient with 8 providers:');
    console.log('      OLD: Check 3 providers, stop at 2 doctors ‚Üí 2 doctors max');
    console.log('      NEW: Check up to 10 providers, get all valid ‚Üí 4-6 doctors possible');
    console.log('');
    console.log('   üìä Patient with 2 providers:');
    console.log('      OLD: Check 2 providers, stop at 2 doctors ‚Üí 2 doctors max');
    console.log('      NEW: Check 2 providers, get all valid ‚Üí 2 doctors (same)');
}

// Execute if run directly
if (require.main === module) {
    console.log('üè• UNLIMITED DOCTORS TEST\n');
    console.log('=' * 70);
    
    demonstrateUnlimitedDoctorsFeature().then(() => {
        console.log('\n' + '=' * 70);
        return testUnlimitedDoctors();
    });
}

module.exports = { testUnlimitedDoctors, demonstrateUnlimitedDoctorsFeature }; 